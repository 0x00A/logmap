#!/usr/bin/env node

var split = require('split')
var path = require('path')
var fs = require('fs')
var moment = require('moment')
var chalk = require('chalk')
var op = require('object-path')
var argv = require('optimist').argv

var settingsFile = path.join(process.env['HOME'], '.logmap')
var settings = {}

if (argv.l || argv.s || argv.d) {
  try {
    var f = String(fs.readFileSync(settingsFile, { flags: 'a' }))
    settings = JSON.parse(f) || {}
  }
  catch(ex) {
    console.log(ex)
  }
}

if (argv.s) {
  settings[argv.s] = argv
  var s = JSON.stringify(settings, 2, 2)
  fs.writeFileSync(settingsFile, s, { flags: 'w' })
  delete argv.s
}

if (argv.d) {
  delete settings[argv.d]
  var s = JSON.stringify(settings, 2, 2)
  fs.writeFileSync(settingsFile, s, { flags: 'w' })
  process.exit(0)
}

if (argv.l) {
  if (settings[argv.l]) {
    argv = settings[argv.l]
  }
  else {
    console.log('%s not found.', argv.l)
  }
}

process.stdin.resume()

function fmt(a) {

  var fmtstr = a.shift()
  var it = 0
  var color = function(_) { return _ }
  fmtstr = fmtstr.replace(/(%(\w*)(\((.*?)\))?)/g, function(_, _, arg, _, val) {

    switch(arg) {
      case 'j': try { val = JSON.stringify(a[it++]); } catch(_) { return '[Circular]' } break
      case 's': val = String(a[it++]); break
      case 'd': val = Number(a[it++]); break
      case 'color': color = op.get(chalk, val); return ''; break
      case 'yellow': color = chalk.yellow; return ''; break
      case 'red': color = chalk.red; return ''; break
      case 'green': color = chalk.green; return ''; break
      case 'blue': color = chalk.blue; return ''; break
      case 'cyan': color = chalk.cyan; return ''; break
      case 'white': color = chalk.white; return ''; break
      case 'magenta': color = chalk.magenta; return ''; break
      case 'date': val = moment(a[it++]).format(val); break
    }
    return color(val)
  })
  console.log(fmtstr)
}

process.stdin
  .pipe(split(argv.split || /(\r?\n)/))
  .on('error', function (err) {
  })
  .on('data', function(data) {
    try { data = JSON.parse(data) } catch(ex) { return }
    var results = []
    argv._.forEach(function(selector) {
      results.push(op.get(data, selector))
    })
    if (argv.f) {
      results.unshift(argv.f)
      return fmt(results)
    }
    console.log(results)
  })
