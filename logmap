#!/usr/bin/env node
var split = require('split')
var path = require('path')
var fs = require('fs')
var moment = require('moment')
var chalk = require('chalk')
var op = require('object-path')
var argv = require('optimist').argv

var settingsFile = path.join(process.env['HOME'], '.logmap')
var settings = {}

if (argv.l || argv.s || argv.d) {
  try {
    var f = String(fs.readFileSync(settingsFile, { flags: 'a' }))
    settings = JSON.parse(f) || {}
  }
  catch(ex) {
    console.log(ex)
  }
}

if (argv.s) {
  settings[argv.s] = argv
  var s = JSON.stringify(settings, 2, 2)
  fs.writeFileSync(settingsFile, s, { flags: 'w' })
  delete argv.s
}

if (argv.d) {
  delete settings[argv.d]
  var s = JSON.stringify(settings, 2, 2)
  fs.writeFileSync(settingsFile, s, { flags: 'w' })
  process.exit(0)
}

if (argv.l) {
  if (settings[argv.l]) {
    argv = settings[argv.l]
  }
  else {
    console.log('%s not found.', argv.l)
  }
}

process.stdin.resume()

var oprRE = /(.*?)(==|!=|<=|>=|<|>)(.*)/g
var fmtRE = /(%(\d+)?(\w*)(\((.*?)\))?)/g

function parse(s) {
  try { return (JSON.parse(s)) } catch(ex) { return }
}

function format(a) {

  var fmtstr = a.shift()
  var it = 0
  var color = function(_) { return _ }
  fmtstr = fmtstr.replace(fmtRE, function(_, _, maxlen, arg, _, val) {

    switch(arg) {
      case 'j': 
        try {
          val = JSON.stringify(a[it++]); }
        catch(_) {
          return '[Circular]'
        }
      break
      case 's': 
        val = String(a[it++])
        if (maxlen) val = val.substr(0, maxlen)
      break
      case 'd': 
        val = Number(a[it++])
      break
      case 'date': 
      case 'moment': 
        val = moment(a[it++]).format(val)
      break

      case 'color': 
      case 'chalk': color = op.get(chalk, val); return ''; break
      case 'yellow': color = chalk.yellow; return ''; break
      case 'red': color = chalk.red; return ''; break
      case 'green': color = chalk.green; return ''; break
      case 'blue': color = chalk.blue; return ''; break
      case 'cyan': color = chalk.cyan; return ''; break
      case 'white': color = chalk.white; return ''; break
      case 'magenta': color = chalk.magenta; return ''; break
    }
    return color(val)
  })
  console.log(fmtstr)
}

process.stdin
  .pipe(split(argv.split || /(\r?\n)/))
  .on('error', function (err) {})
  .on('data', function(data) {
    var results = []
    data = parse(data)

    var ok = argv._.every(function(arg) {
      if (typeof arg != 'string') return
      var bop = oprRE.exec(arg)

      if (!bop) {
        var val = op.get(data, arg)
        if (!val) return false

        results.push(val)
        return true
      }

      var selector = bop[1].trim()
      var oper = bop[2]
      var rval = parse(bop[3].trim())
      var lval = op.get(data, selector)
      if (!lval) return false

      switch (oper) {
        case '==': return lval == rval; break
        case '>': return lval > rval; break
        case '<': return lval < rval; break
        case '>=': return lval >= rval; break
        case '<=': return lval <= rval; break
        case '!=': return lval != rval; break
        default: return fase; break
      }
    })
    if (!ok) return
    if (argv.f) {
      results.unshift(argv.f)
      return format(results)
    }
    console.log(results)
  })
